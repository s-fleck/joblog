% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/job.R
\name{job}
\alias{job}
\alias{job_start}
\alias{job_finished}
\alias{job_failed}
\alias{last_job_id}
\title{Log the start or end of a job}
\usage{
job_start(
  name,
  status = 1L,
  jobtype = 1L,
  ...,
  id = ulid::generate(),
  repeats = NULL,
  path = NULL,
  msg = NULL
)

job_finished(msg = NULL, id = last_job_id())

job_failed(msg = NULL, id = last_job_id())

last_job_id()
}
\arguments{
\item{name}{\code{character} scalar. Name of the job}

\item{status}{\code{integer} scalar. Status of the job; \code{0} = succesfully completed, \code{1} = started, \code{2} = failed.}

\item{jobtype}{\code{integer} scalar. \code{1} = scheduled (for example via cron), 2 = triggered, 3 = manually started}

\item{...}{added to the resulting \code{list}}

\item{id}{a global unique id (such as UUID or ULID) for the job}

\item{repeats}{\code{timestamp} when the job is expected to repeat}

\item{path}{\code{character} scalar. path to the script that contains the job}

\item{msg}{\code{character} scalar. a custom message to add to the job's log
message}
}
\value{
\code{job_start()}, \code{job_finsihed()}, \code{job_failed()} return a \code{list()}
that can be passed to \code{Logger$list_log()}

\code{last_job_id()} returns the id (a \code{character} scalar) of the last
job registered with \code{job_start()}.
}
\description{
Log the start or end (either succesfully or not) of a job. Each job has a
name (for example \code{update-prod-database}). Each unique run of a job is
identified by its (usually autogenerated \code{id}).
}
\section{Side Effects}{

\code{job_start()} assigns the variable \code{.last_job_id} to the environment
\code{joblog.globals}, which is used by \code{job_finished()} and \code{job_failed()}. If
you want to run several jobs concurrently, you need to pass \code{id} in
manually.
}

\examples{
lg <- lgr::get_logger("test")
lg$list_log(job_start("update-database"))
lg$list_log(job_finished())

# run the job again the next day
lg$list_log(job_start("update-database"))
lg$list_log(job_failed("something went wrong this time"))

last_job_id()
}
